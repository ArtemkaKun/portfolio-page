@page "/"
@using PortfolioAppServer.AboutDataSystem
@using PortfolioAppServer.ProjectsDataSystem
@inject IJSRuntime JS

<PageTitle>Artem Yurchenko</PageTitle>

@GetAboutHtmlContent()

<h2 id="experience-header">Experience</h2>

@foreach (IProjectData projectData in GetProjectsData())
{
    <article>
        <h4 class="project-name">@projectData.Name</h4>

        <div id="project-tags-container">
            @foreach (string tag in projectData.Tags)
            {
                <span class="project-tag">@tag</span>
            }
        </div>

        <p>@projectData.Description</p>

        Achievements:
        <ul>
            @foreach (string achievement in projectData.Achievements)
            {
                <li>@achievement</li>
            }
        </ul>
    </article>
}

@code
{
    private const string YourBrowserDoesNotSupportAVIFMessage = "(Hi. Your browser doesn't support avif format that I use on this page to save your time and internet traffic. Please, open the page in latest Google Chrome or Firefox browser)";
    private const string CvFileName = "ArtemYurchenkoCV.pdf";

    private static MarkupString GetAboutHtmlContent()
    {
        const string pathToAboutDataFile = "About.html";
        IAboutDataProvider dataProvider = new AboutHtmlDataFileReader(pathToAboutDataFile);
        string aboutHtmlData = new AboutHtmlDataManager(dataProvider).RequestData();
        string aboutHtmlDataWithTemplates = aboutHtmlData.Replace($"@{nameof(YourBrowserDoesNotSupportAVIFMessage)}", YourBrowserDoesNotSupportAVIFMessage);

        return new MarkupString(aboutHtmlDataWithTemplates);
    }

    private static IReadOnlyList<IProjectData> GetProjectsData()
    {
        IProjectsDataStorage projectsDataStorage = new MongoDBProjectsDataStorage();

        return projectsDataStorage.GetProjectsData();
    }

    private Stream GetFileStream()
    {
        return File.OpenRead(CvFileName);
    }

    private async Task DownloadCVFile()
    {
        var fileStream = GetFileStream();
        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", CvFileName, streamRef);
    }
}