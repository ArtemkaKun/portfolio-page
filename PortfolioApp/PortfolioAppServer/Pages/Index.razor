@page "/"
@using PortfolioAppServer.AboutDataSystem
@using PortfolioAppServer.ProjectsDataSystem
@inject IJSRuntime JS

<PageTitle>Artem Yurchenko</PageTitle>

@GetAboutHtmlContent()

<h2 id="experience-header">Experience</h2>

@foreach (IProjectData projectData in GetProjectsData())
{
    <article>
        <h4 class="project-name">@projectData.Name</h4>

        <div id="project-tags-container">
            @foreach (string tag in projectData.Tags)
            {
                <span class="project-tag">@tag</span>
            }
        </div>

        <p>@projectData.Description</p>

        Achievements:
        <ul>
            @foreach (string achievement in projectData.Achievements)
            {
                <li>@achievement</li>
            }
        </ul>
    </article>
}

<a class="author-mention-link" href="https://www.flaticon.com/free-icons/cv" title="CV icons">CV icons created by Freepik - Flaticon</a>
<a class="author-mention-link" href="https://www.flaticon.com/free-icons/document" title="document icons">Document icons created by smalllikeart - Flaticon</a>

@code
{
    private const string CvFileName = "ArtemYurchenkoCV.pdf";
    private const string ExperienceFileName = "ArtemYurchenkoExperience.pdf";

    private static MarkupString GetAboutHtmlContent()
    {
        const string pathToAboutDataFile = "About.html";
        IAboutDataProvider dataProvider = new AboutHtmlDataFileReader(pathToAboutDataFile);
        string aboutHtmlData = new AboutHtmlDataManager(dataProvider).RequestData();

        return new MarkupString(aboutHtmlData);
    }

    private static IReadOnlyList<IProjectData> GetProjectsData()
    {
        IProjectsDataStorage projectsDataStorage = new MongoDBProjectsDataStorage();

        return projectsDataStorage.GetProjectsData();
    }

    private async Task DownloadCVFile()
    {
        FileStream fileStream = File.OpenRead(CvFileName);
        using DotNetStreamReference streamRef = new DotNetStreamReference(fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", CvFileName, streamRef);
    }
    
    private async Task DownloadExperienceFile()
    {
        byte[] randomBinaryData = new byte[50 * 1024];
        MemoryStream fileStream = new MemoryStream(randomBinaryData);
        using DotNetStreamReference streamRef = new DotNetStreamReference(fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", ExperienceFileName, streamRef);
    }
}