@page "/"
@using PortfolioAppServer.AboutDataSystem
@using PortfolioAppServer.ProjectsDataSystem
@using DinkToPdf
@using System.Text
@using PortfolioAppServer.Scripts
@inject IJSRuntime JS

<PageTitle>Artem Yurchenko</PageTitle>

@GetAboutHeaderHtmlContent()

<span id="download-buttons-container">
    <button @onclick="DownloadCVFile" title="Download CV">
        <img class="small-icon" src="resources/icons/avif/cv.avif" alt="Download CV"/>
    </button>

    <button @onclick="DownloadExperienceFile" title="Download the 'Experience' section as PDF">
        <img class="small-icon" src="resources/icons/avif/document.avif" alt="Download the 'Experience' section as PDF"/>
    </button>
</span>

@GetAboutHtmlContent()

<h2 id="experience-header">Experience</h2>

@foreach (IProjectData projectData in GetProjectsData())
{
    <article>
        <h4 class="project-name">@projectData.Name</h4>

        <div id="project-tags-container">
            @foreach (string tag in projectData.Tags)
            {
                <span class="project-tag">@tag</span>
            }
        </div>

        <p>@projectData.Description</p>

        Achievements:
        <ul>
            @foreach (string achievement in projectData.Achievements)
            {
                <li>@achievement</li>
            }
        </ul>
    </article>
}

<a class="author-mention-link" href="https://www.flaticon.com/free-icons/cv" title="CV icons">CV icons created by Freepik - Flaticon</a>
<a class="author-mention-link" href="https://www.flaticon.com/free-icons/document" title="document icons">Document icons created by smalllikeart - Flaticon</a>

@code
{
        private const string CvFileName = "ArtemYurchenkoCV.pdf";
        private const string ExperienceFileName = "ArtemYurchenkoExperience.pdf";

    private MarkupString GetAboutHeaderHtmlContent()
    {
        const string pathToAboutDataFile = "AboutHeader.html";
        IAboutDataProvider dataProvider = new AboutHtmlDataFileReader(pathToAboutDataFile);
        string aboutHtmlData = new AboutHtmlDataManager(dataProvider).RequestData();

        return new MarkupString(aboutHtmlData);
    }

    private MarkupString GetAboutHtmlContent()
    {
        const string pathToAboutDataFile = "About.html";
        IAboutDataProvider dataProvider = new AboutHtmlDataFileReader(pathToAboutDataFile);
        string aboutHtmlData = new AboutHtmlDataManager(dataProvider).RequestData();

        return new MarkupString(aboutHtmlData);
    }

    private static IReadOnlyList<IProjectData> GetProjectsData()
    {
        IProjectsDataStorage projectsDataStorage = new MongoDBProjectsDataStorage();

        return projectsDataStorage.GetProjectsData();
    }

    private async Task DownloadCVFile()
    {
        FileStream fileStream = File.OpenRead(CvFileName);
        using DotNetStreamReference streamRef = new DotNetStreamReference(fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", CvFileName, streamRef);
    }

    private async Task DownloadExperienceFile()
    {
        StringBuilder htmlStringBuilder = new();

        htmlStringBuilder.Append("<style>");
        htmlStringBuilder.Append(File.ReadAllText("wwwroot/css/bootstrap/bootstrap.min.css"));
        htmlStringBuilder.Append("</style>");

        htmlStringBuilder.Append("<style>");
        htmlStringBuilder.Append(File.ReadAllText("wwwroot/css/Simple.css"));
        htmlStringBuilder.Append("</style>");

        htmlStringBuilder.Append("<style>");
        htmlStringBuilder.Append(File.ReadAllText("wwwroot/css/site.css"));
        htmlStringBuilder.Append("</style>");

        htmlStringBuilder.Append("<style>");
        htmlStringBuilder.Append(".project-tag {color : white;}");
        htmlStringBuilder.Append("</style>");

        htmlStringBuilder.Append("<h2>Experience</h2>");
        htmlStringBuilder.Append("<body>");

        foreach (IProjectData projectData in GetProjectsData())
        {
            htmlStringBuilder.Append($"<article><h4 class='project-name'>{projectData.Name}</h4>");

            foreach (string tag in projectData.Tags)
            {
                htmlStringBuilder.Append($@"<span class='project-tag'>{tag}</span>");
            }

            htmlStringBuilder.Append($"<p>{projectData.Description}</p>");

            htmlStringBuilder.Append("Achievements:");
            htmlStringBuilder.Append("<ul>");

            foreach (string achievement in projectData.Achievements)
            {
                htmlStringBuilder.Append($"<li>{achievement}</li>");
            }

            htmlStringBuilder.Append("</ul> </article>");
            htmlStringBuilder.Append("</body>");
        }

        HtmlToPdfDocument doc = new()
        {
            GlobalSettings =
            {
                ColorMode = ColorMode.Color,
                Orientation = Orientation.Portrait,
                PaperSize = PaperKind.A4
            },
            Objects =
            {
                new ObjectSettings
                {
                    PagesCount = true,
                    HtmlContent = htmlStringBuilder.ToString(),
                    WebSettings =
                    {
                        DefaultEncoding = "utf-8"
                    }
                }
            }
        };

        byte[] pdf = StaticPdfConverter.Converter.Convert(doc);
        using MemoryStream pdfFileStream = new(pdf);
        using DotNetStreamReference streamRef = new(pdfFileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", ExperienceFileName, streamRef);
    }
}